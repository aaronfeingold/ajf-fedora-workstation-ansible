#!/bin/bash

set -e

# Function to prompt for input and set environment variables with default values
set_env_var() {
    local var_name=$1
    local prompt_message=$2
    local default_value=$3

    # Prompt for user input
    read -p "$prompt_message (default: $default_value): " user_input

    # Use default value if input is blank
    if [ -z "$user_input" ]; then
        user_input=$default_value
    fi

    # Set environment variable
    export $var_name="$user_input"

    # Print confirmation
    echo "$var_name has been set to $user_input"
}

# Prompt for AWS environment variables with default values
set_env_var "AWS_DEFAULT_REGION" "Enter AWS Default Region" "us-east-1"
set_env_var "AWS_DEFAULT_OUTPUT" "Enter AWS Default Output" "json"
set_env_var "AWS_ACCESS_KEY_ID" "Enter AWS Access Key ID" ""
set_env_var "AWS_SECRET_ACCESS_KEY" "Enter AWS Secret Access Key" ""


# Function to check if Python is installed (pyenv or otherise)
check_python() {
    if command -v python3 &>/dev/null; then
        PYTHON_VERSION=$(python3 --version 2>&1)
        echo "Python is installed: $PYTHON_VERSION"
    else
        echo "Python is not installed."
        install_python
    fi
}

# Function to install Python 3.11.0 globally on Fedora
install_python() {
    echo "Installing Python 3.11.0..."

    # Update the package repository
    sudo dnf -y update

    # Enable the Fedora Modular repository
    sudo dnf module reset python
    sudo dnf module enable python:3.11

    # Install Python 3.11
    sudo dnf install -y python3.11

    # Verify the installation
    if command -v python3.11 &>/dev/null; then
        echo "Python 3.11.0 has been installed successfully."
    else
        echo "Failed to install Python 3.11.0."
    fi
}

# Check if Python is installed and version
check_python

# Check if ansible is installed
setup_ansible () {

    if ! command -v ansible &> /dev/null
    then
        echo "Ansible is not installed. Installing Ansible..."

        # Update system packages
        sudo dnf update -y

        # Install Ansible
        sudo dnf install ansible -y

        echo "Ansible installed successfully!"
    else
        echo 'ansible is installed.'
        ansible --version
    fi
}

setup_ansible

# Function to create Ansible vault and write the environment variables
create_vault_file() {
    local vault_file="aws_vars.yml"

    # Ensure vault file exists
    if [ -f "$vault_file" ]; then
        echo "Vault file already exists: $vault_file"
    else
        touch "$vault_file"
        echo "Created vault file: $vault_file"
    fi

    # Encrypt the variables into the vault
    ansible-vault encrypt_string "$AWS_ACCESS_KEY_ID" --name 'aws_access_key_id' >> "$vault_file"
    ansible-vault encrypt_string "$AWS_SECRET_ACCESS_KEY" --name 'aws_secret_access_key' >> "$vault_file"
    ansible-vault encrypt_string "$AWS_DEFAULT_REGION" --name 'aws_secret_access_key' >> "$vault_file"
    ansible-vault encrypt_string "$AWS_DEFAULT_OUTPUT" --name 'aws_default_output' >> "$vault_file"

    echo "Encrypted variables saved to $vault_file"
}

# Call the function to create the vault and store the variables
create_vault_file
