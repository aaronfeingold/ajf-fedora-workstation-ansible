---
  - name: get the username running the deploy
    become: false
    local_action: command whoami
    register: username_on_the_host

  - name: get the home directory of the user running the deploy
    shell: "getent passwd '{{ username_on_the_host.stdout }}' | cut -d: -f6"
    register: user_home_dir
    args:
      executable: /bin/bash

  - name: Check if Node.js is installed
    command: node --version
    register: node_version
    ignore_errors: true
    become: false

  - name: Print node standard out
    debug:
      msg: "node_version {{ node_version }}"
    when: node_version.rc != 0
    become: false

  - name: Install Node.js and npm if not installed
    dnf:
      name: nodejs
      state: present
    when: node_version.rc != 0
    become: yes

  - name: Check if nvm is installed
    command: command -v nvm
    register: nvm_check
    ignore_errors: true

  - name: Install NVM using GitHub install script
    shell: |
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
    become: false
    when: nvm_check.rc  != 0

  - name: Ensure NVM is installed and default Node.js version is set
    shell: |
      if [ -s "{{ user_home_dir.stdout }}/.nvm/nvm.sh" ]; then
        . "{{ user_home_dir.stdout }}/.nvm/nvm.sh"
        nvm install node
        nvm alias default node
      else
        echo "NVM is not installed properly"
        exit 1
      fi
    args:
      executable: /bin/bash

  - name: Add custom function and alias to .bashrc for easy NVM project management
    lineinfile:
      path: "{{ user_home_dir.stdout }}/.bashrc"
      line: |
        cdnvm() {
            command cd "$@" || return $?
            nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

            # If there are no .nvmrc file, use the default nvm version
            if [[ ! $nvm_path = *[^[:space:]]* ]]; then

                declare default_version;
                default_version=$(nvm version default);

                # If there is no default version, set it to `node`
                # This will use the latest version on your machine
                if [[ $default_version == "N/A" ]]; then
                    nvm alias default node;
                    default_version=$(nvm version default);
                fi

                # If the current version is not the default version, set it to use the default version
                if [[ $(nvm current) != "$default_version" ]]; then
                    nvm use default;
                fi

            elif [[ -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
                declare nvm_version
                nvm_version=$(<"$nvm_path"/.nvmrc)

                declare locally_resolved_nvm_version
                # `nvm ls` will check all locally-available versions
                # If there are multiple matching versions, take the latest one
                # Remove the `->` and `*` characters and spaces
                # `locally_resolved_nvm_version` will be `N/A` if no local versions are found
                locally_resolved_nvm_version=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')

                # If it is not already installed, install it
                # `nvm install` will implicitly use the newly-installed version
                if [[ "$locally_resolved_nvm_version" == "N/A" ]]; then
                    nvm install "$nvm_version";
                elif [[ $(nvm current) != "$locally_resolved_nvm_version" ]]; then
                    nvm use "$nvm_version";
                fi
            fi
        }

        alias cd='cdnvm'
        cdnvm "$PWD" || exit
      state: present
      create: yes
    when: add_cdnvm_to_bashrc == "true"

  - name: Debug .bashrc content
    shell: cat {{ user_home_dir.stdout }}/.bashrc
    register: bashrc_content
    args:
      executable: /bin/bash

  - name: Print .bashrc content
    debug:
      msg: "{{ bashrc_content.stdout }}"
